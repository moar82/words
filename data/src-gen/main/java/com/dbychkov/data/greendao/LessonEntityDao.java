package com.dbychkov.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LESSONS.
*/
public class LessonEntityDao extends AbstractDao<LessonEntity, Long> {

    public static final String TABLENAME = "LESSONS";

    /**
     * Properties of entity LessonEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LessonName = new Property(1, String.class, "lessonName", false, "LESSON_NAME");
        public final static Property UserLesson = new Property(2, boolean.class, "userLesson", false, "USER_LESSON");
        public final static Property ImagePath = new Property(3, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Bookmarked = new Property(4, boolean.class, "bookmarked", false, "BOOKMARKED");
    };

    private DaoSession daoSession;


    public LessonEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LessonEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LESSONS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LESSON_NAME' TEXT NOT NULL ," + // 1: lessonName
                "'USER_LESSON' INTEGER NOT NULL ," + // 2: userLesson
                "'IMAGE_PATH' TEXT NOT NULL ," + // 3: imagePath
                "'BOOKMARKED' INTEGER NOT NULL );"); // 4: bookmarked
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LessonEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLessonName());
        stmt.bindLong(3, entity.getUserLesson() ? 1l: 0l);
        stmt.bindString(4, entity.getImagePath());
        stmt.bindLong(5, entity.getBookmarked() ? 1l: 0l);
    }

    @Override
    protected void attachEntity(LessonEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LessonEntity readEntity(Cursor cursor, int offset) {
        LessonEntity entity = new LessonEntity( //
                // id
                // lessonName
                // userLesson
                // imagePath
                // bookmarked
                new LessonEntityPO(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), cursor.getString(offset + 1), cursor.getShort(offset + 2) != 0, cursor.getString(offset + 3), cursor.getShort(offset + 4) != 0));
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LessonEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLessonName(cursor.getString(offset + 1));
        entity.setUserLesson(cursor.getShort(offset + 2) != 0);
        entity.setImagePath(cursor.getString(offset + 3));
        entity.setBookmarked(cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LessonEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LessonEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
