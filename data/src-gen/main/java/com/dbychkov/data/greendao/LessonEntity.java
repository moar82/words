package com.dbychkov.data.greendao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LESSONS.
 */
public class LessonEntity implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String lessonName;
    private boolean userLesson;
    /** Not-null value. */
    private String imagePath;
    private boolean bookmarked;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LessonEntityDao myDao;

    private List<FlashcardEntity> flashcardEntityList;

    public LessonEntity() {
    }

    public LessonEntity(Long id) {
        this.id = id;
    }

    public LessonEntity(LessonEntityPO lessonEntityPO) {
        this.id = lessonEntityPO.getId();
        this.lessonName = lessonEntityPO.getLessonName();
        this.userLesson = lessonEntityPO.isUserLesson();
        this.imagePath = lessonEntityPO.getImagePath();
        this.bookmarked = lessonEntityPO.isBookmarked();
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLessonEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getLessonName() {
        return lessonName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLessonName(String lessonName) {
        this.lessonName = lessonName;
    }

    public boolean getUserLesson() {
        return userLesson;
    }

    public void setUserLesson(boolean userLesson) {
        this.userLesson = userLesson;
    }

    /** Not-null value. */
    public String getImagePath() {
        return imagePath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public boolean getBookmarked() {
        return bookmarked;
    }

    public void setBookmarked(boolean bookmarked) {
        this.bookmarked = bookmarked;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FlashcardEntity> getFlashcardEntityList() {
        if (flashcardEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FlashcardEntityDao targetDao = daoSession.getFlashcardEntityDao();
            List<FlashcardEntity> flashcardEntityListNew = targetDao._queryLessonEntity_FlashcardEntityList(id);
            synchronized (this) {
                if(flashcardEntityList == null) {
                    flashcardEntityList = flashcardEntityListNew;
                }
            }
        }
        return flashcardEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFlashcardEntityList() {
        flashcardEntityList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
